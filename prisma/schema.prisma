generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  admin          Boolean   @default(false)
  role           String    @default("user")
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  messages Message[]


  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Category {
  id            String @id @default(uuid())
  name          String
  companions    Companion[]
}

enum Illness {
  anxiety
  bipolar
  borderline
  okb
  ADHD
}

model Companion {
  id            String @id @default(uuid())
  image         String
  name          String @db.Text
  age           String?
  flag          String?
  illness       Illness?
  description   String @db.Text
  instructions  String @db.Text
  seed          String @db.Text

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String

  messages      Message[]
  @@index([categoryId])
  @@fulltext([name])
}

enum Role {
  user
  system
}

model Message {
  id          String   @id @default(uuid())
  role        Role
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companionId String
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([companionId])
  @@index([userId])
}